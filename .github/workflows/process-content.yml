name: Process New Content

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

permissions:
  contents: write
  issues: read

jobs:
  process-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create directories if they don't exist
        run: |
          mkdir -p data content/art content/photos content/journal content/cat content/videos pages css
      
      - name: Create empty data files if they don't exist
        run: |
          for file in art photos journal cat videos; do
            [ -f data/$file.json ] || echo '{"items":[]}' > data/$file.json
          done
      
      - name: Process issue content
        if: github.event_name == 'issues'
        run: |
          echo '${{ toJSON(github.event.issue) }}' > issue_data.json

          cat > process-issue.js << 'EOF'
          const fs = require('fs');

          try {
              const issueData = JSON.parse(fs.readFileSync('issue_data.json', 'utf8'));

              const title = issueData.title || "Untitled";
              const body = issueData.body || "";
              const createdAt = issueData.created_at || new Date().toISOString();
              const labels = issueData.labels || [];
              const date = new Date(createdAt);
              const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth()+1).toString().padStart(2, '0')}.${date.getFullYear()}`;
              
              let contentType = 'art'; 
              if (title.toLowerCase().includes('[photo]') || labels.some(l => l.name.toLowerCase() === 'photo')) contentType = 'photos';
              if (title.toLowerCase().includes('[journal]') || labels.some(l => l.name.toLowerCase() === 'journal')) contentType = 'journal';
              if (title.toLowerCase().includes('[cat]') || labels.some(l => l.name.toLowerCase() === 'cat')) contentType = 'cat';
              if (title.toLowerCase().includes('[video]') || labels.some(l => l.name.toLowerCase() === 'video')) contentType = 'videos';

              function extractField(body, fieldName) {
                  const regex = new RegExp(`### ${fieldName}\\s+([^#]*?)(?=###|$)`, 's');
                  const match = body.match(regex);
                  return match ? match[1].trim() : '';
              }

              const description = extractField(body, 'Description');
              const videoUrl = extractField(body, 'Video URL \\(optional\\)');

              if (!videoUrl.includes('youtube.com/watch?v=') && !videoUrl.includes('youtu.be/')) {
                  console.log("Invalid or missing video URL");
                  process.exit(0);
              }

              const videoId = videoUrl.includes('youtube.com/watch?v=') 
                  ? videoUrl.split('v=')[1].split('&')[0] 
                  : videoUrl.split('youtu.be/')[1].split('?')[0];

              const newItem = {
                  id: title.toLowerCase().replace(/\s+/g, '-'),
                  title: title,
                  date: formattedDate,
                  description: description || null,
                  video: videoUrl,
                  embed: `<iframe width="560" height="315" src="https://www.youtube.com/embed/${videoId}" frameborder="0" allowfullscreen></iframe>`
              };

              const dataPath = `data/${contentType}.json`;
              let data = { items: [] };
              if (fs.existsSync(dataPath)) {
                  try {
                      data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
                  } catch (error) {
                      console.log(`Error reading ${dataPath}, creating new file.`);
                  }
              }

              data.items.unshift(newItem);
              fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));

              console.log(`Processed issue: ${title}`);
          } catch (error) {
              console.error("Error processing issue:", error);
              process.exit(1);
          }
          EOF

          node process-issue.js

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add data/videos.json
          git commit -m "Updated videos from issues" || echo "No changes to commit"
          git push
