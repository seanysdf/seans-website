name: Process New Content

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  issues: read

jobs:
  process-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create directories
        run: |
          mkdir -p data
          mkdir -p content/art
          mkdir -p content/photos
          mkdir -p content/journal
          mkdir -p content/cat
          mkdir -p content/videos
          mkdir -p pages
          mkdir -p css
      
      - name: Create empty data files if needed
        run: |
          [ -f data/art.json ] || echo '{"items":[]}' > data/art.json
          [ -f data/photos.json ] || echo '{"items":[]}' > data/photos.json
          [ -f data/journal.json ] || echo '{"items":[]}' > data/journal.json
          [ -f data/cat.json ] || echo '{"items":[]}' > data/cat.json
          [ -f data/videos.json ] || echo '{"items":[]}' > data/videos.json
      
      - name: Process issue content
        if: github.event_name == 'issues'
        run: |
          # Create issue data file
          echo '${{ toJSON(github.event.issue) }}' > issue_data.json
          
          # Create simple processing script
          cat > process.js << 'EOF'
          const fs = require('fs');

          try {
            // Read the issue data
            const issueData = JSON.parse(fs.readFileSync('issue_data.json', 'utf8'));
            
            // Get basic info
            const title = issueData.title || '';
            const body = issueData.body || '';
            const createdAt = issueData.created_at;
            
            // Determine content type from title
            let contentType = 'art'; // Default
            if (title.toLowerCase().includes('[photo]')) contentType = 'photos';
            if (title.toLowerCase().includes('[journal]')) contentType = 'journal';
            if (title.toLowerCase().includes('[cat]')) contentType = 'cat';
            if (title.toLowerCase().includes('[video]')) contentType = 'videos';
            
            console.log(`Processing issue: "${title}" as type: ${contentType}`);
            
            // Format date
            const date = new Date(createdAt);
            const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth()+1).toString().padStart(2, '0')}.${date.getFullYear()}`;
            
            // Create ID from title
            const cleanTitle = title.replace(/\[[^\]]+\]/g, '').trim();
            const id = cleanTitle.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
            
            // Extract fields from body
            function extractField(body, fieldName) {
              const regex = new RegExp(`### ${fieldName}\\s+([^#]*?)(?=###|$)`, 's');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            }
            
            const description = extractField(body, 'Description');
            const content = extractField(body, 'Content');
            const image = extractField(body, 'Image URL \\(optional\\)');
            const videoUrl = extractField(body, 'Video URL \\(optional\\)');
            
            // Create the new item
            const newItem = {
              id: id,
              title: cleanTitle,
              date: formattedDate,
              description: description || null,
              content: content,
              image: image || null,
              video: videoUrl || null,
              url: `content/${contentType}/${id}.html`
            };
            
            // Read existing data
            const dataPath = `data/${contentType}.json`;
            let data = { items: [] };
            
            if (fs.existsSync(dataPath)) {
              try {
                data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
              } catch (error) {
                console.log(`Error reading ${dataPath}. Creating new file.`);
              }
            }
            
            // Add new item (or update existing one with same ID)
            const existingIndex = data.items.findIndex(item => item.id === id);
            if (existingIndex >= 0) {
              data.items[existingIndex] = newItem;
            } else {
              data.items.unshift(newItem); // Add to beginning (newest first)
            }
            
            // Write updated data
            fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
            console.log(`Updated ${dataPath} with entry: ${cleanTitle}`);
            
            // Create HTML file
            let htmlContent = `<!DOCTYPE html>
            <html>
            <head>
                <title>${cleanTitle} | ART ARCHIVE</title>
                <link rel="stylesheet" href="../../css/style.css">
            </head>
            <body>
                <h1>${cleanTitle}</h1>
                <div class="date">${formattedDate}</div>
                ${description ? `<div class="description">${description}</div>` : ''}
                
                ${image ? `<div class="image"><img src="${image}" alt="${cleanTitle}" style="max-width:100%;"></div>` : ''}
                
                ${videoUrl ? `<div class="video-container">` : ''}
                ${videoUrl && videoUrl.includes('youtube.com/watch?v=') ? 
                  `<iframe width="100%" height="315" src="https://www.youtube.com/embed/${videoUrl.split('v=')[1].split('&')[0]}" frameborder="0" allowfullscreen></iframe>` : ''}
                ${videoUrl && videoUrl.includes('vimeo.com/') ? 
                  `<iframe src="https://player.vimeo.com/video/${videoUrl.split('vimeo.com/')[1].split('?')[0]}" width="100%" height="315" frameborder="0" allowfullscreen></iframe>` : ''}
                ${videoUrl && !videoUrl.includes('youtube.com') && !videoUrl.includes('vimeo.com') ? 
                  `<video controls width="100%"><source src="${videoUrl}" type="video/mp4">Your browser does not support the video tag.</video>` : ''}
                ${videoUrl ? `</div>` : ''}
                
                <div class="content">
                    ${content.replace(/\n/g, '<br>')}
                </div>
                <div class="footer">
                    <a href="/">‚Üê back to archive</a>
                </div>
            </body>
            </html>`;
            
            fs.writeFileSync(`content/${contentType}/${id}.html`, htmlContent);
            console.log(`Created/updated entry: ${cleanTitle} (content/${contentType}/${id}.html)`);
            
          } catch (error) {
            console.error(`Error processing issue:`, error);
          }
          EOF
          
          # Run the processing script
          node process.js
      
      - name: Create index.html if it doesn't exist
        run: |
          if [ ! -f index.html ]; then
            echo '<!DOCTYPE html>
            <html>
            <head>
                <title>ART ARCHIVE</title>
                <link rel="stylesheet" href="css/style.css">
            </head>
            <body>
                <h1>ART ARCHIVE</h1>
                <div class="subtitle">personal collection of works / updated irregularly</div>
                
                <h2>ART</h2>
                <div id="art-section">
                    <div class="loading">Loading art entries...</div>
                </div>
                
                <h2>PHOTOS</h2>
                <div id="photos-section">
                    <div class="loading">Loading photo entries...</div>
                </div>
                
                <h2>VIDEOS</h2>
                <div id="videos-section">
                    <div class="loading">Loading video entries...</div>
                </div>
                
                <h2>JOURNAL</h2>
                <div id="journal-section">
                    <div class="loading">Loading journal entries...</div>
                </div>
                
                <h2>MY CAT</h2>
                <div id="cat-section" class="cat-section">
                    <div class="loading">Loading cat content...</div>
                </div>
                
                <h2>SOMETHING RANDOM</h2>
                
                <div class="random">
                found a roll of film from 2019 under my bed. getting it developed tomorrow.<br>
                <br>
                current studio playlist:<br>
                - boards of canada - music has the right to children<br>
                - autechre - amber<br>
                - aphex twin - selected ambient works 85-92<br>
                - burial - untrue<br>
                <br>
                dream from last night: standing in an empty museum where all the paintings were actually windows<br>
                <br>
                next experiment: trying to create a camera obscura in my bathroom
                </div>
                
                <div class="footer">
                    last updated: <span id="last-updated-date">15.05.2024</span> | no images loaded = faster browsing<br>
                    <a href="mailto:artist@example.com">contact</a> | 
                    <a href="pages/about.html">about</a>
                </div>

                <script>
                    // Function to load content from JSON file
                    function loadContent(contentType, elementId, limit = 5) {
                        fetch(`./data/${contentType}.json?v=${new Date().getTime()}`)
                            .then(response => response.json())
                            .then(data => {
                                const contentSection = document.getElementById(elementId);
                                contentSection.innerHTML = ""; // Clear loading message
                                
                                // Display the most recent items
                                if (data && data.items && data.items.length > 0) {
                                    // Update the last updated date
                                    if (data.items[0] && data.items[0].date) {
                                        document.getElementById("last-updated-date").textContent = data.items[0].date;
                                    }
                                    
                                    data.items.slice(0, limit).forEach(item => {
                                        const itemDiv = document.createElement("div");
                                        itemDiv.className = contentType === "cat" ? "cat-item" : "item";
                                        
                                        // Create date span
                                        const dateSpan = document.createElement("span");
                                        dateSpan.className = "date";
                                        dateSpan.textContent = item.date;
                                        itemDiv.appendChild(dateSpan);
                                        
                                        // Create title link
                                        const titleLink = document.createElement("a");
                                        titleLink.href = item.url;
                                        titleLink.textContent = item.title;
                                        itemDiv.appendChild(titleLink);
                                        
                                        // Add description if available
                                        if (item.description) {
                                            const descSpan = document.createElement("span");
                                            descSpan.className = "description";
                                            descSpan.textContent = item.description;
                                            itemDiv.appendChild(descSpan);
                                        }
                                        
                                        contentSection.appendChild(itemDiv);
                                    });
                                    
                                    // Add "see all" link if there are more than the limit
                                    if (data.items.length > limit) {
                                        const seeAllDiv = document.createElement("div");
                                        seeAllDiv.className = "view-all";
                                        seeAllDiv.innerHTML = `<a href="pages/${contentType}.html">see all ${contentType} (${data.items.length}) ‚Üí</a>`;
                                        contentSection.appendChild(seeAllDiv);
                                    }
                                } else {
                                    const emptyItem = document.createElement("div");
                                    emptyItem.className = contentType === "cat" ? "cat-item" : "item";
                                    emptyItem.innerHTML = "<span class=\"date\">--.--.----</span>No entries yet";
                                    contentSection.appendChild(emptyItem);
                                }
                            })
                            .catch(error => {
                                console.error(`Error loading ${contentType} content:`, error);
                                const contentSection = document.getElementById(elementId);
                                contentSection.innerHTML = "";
                                const emptyItem = document.createElement("div");
                                emptyItem.className = contentType === "cat" ? "cat-item" : "item";
                                emptyItem.innerHTML = "<span class=\"date\">--.--.----</span>No entries yet";
                                contentSection.appendChild(emptyItem);
                            });
                    }

                    // Load all content types when the page loads
                    document.addEventListener("DOMContentLoaded", function() {
                        loadContent("art", "art-section");
                        loadContent("photos", "photos-section");
                        loadContent("videos", "videos-section");
                        loadContent("journal", "journal-section");
                        loadContent("cat", "cat-section");
                    });
                </script>
            </body>
            </html>' > index.html
          fi
      
      - name: Create basic CSS if it doesn't exist
        run: |
          if [ ! -f css/style.css ]; then
            echo 'body {
                background-color: #f8f8f8;
                font-family: "Lucida Console", Monaco, monospace;
                margin: 0;
                padding: 20px;
                color: #222222;
                max-width: 800px;
                margin: 0 auto;
            }
            
            h1 {
                font-size: 20px;
                margin-bottom: 5px;
                text-transform: uppercase;
            }
            
            h2 {
                font-size: 16px;
                margin-top: 25px;
                margin-bottom: 10px;
                border-bottom: 1px solid #000;
                padding-bottom: 3px;
                text-transform: uppercase;
            }
            
            a {
                color: #000;
                text-decoration: none;
            }
            
            a:hover {
                text-decoration: underline;
            }
            
            a:visited {
                color: #555;
            }
            
            .date {
                color: #666;
                font-size: 12px;
                display: inline-block;
                width: 90px;
            }
            
            .description {
                color: #444;
                font-size: 12px;
                margin-left: 10px;
                font-style: italic;
            }
            
            .item {
                margin-bottom: 6px;
                line-height: 1.4;
            }
            
            .footer {
                margin-top: 30px;
                font-size: 11px;
                color: #666;
                border-top: 1px solid #ccc;
                padding-top: 10px;
            }
            
            .random {
                margin: 20px 0;
                padding: 10px;
                border: 1px solid #ccc;
                background-color: #f0f0f0;
                font-family: "Courier New", monospace;
            }
            
            .subtitle {
                color: #666;
                font-size: 12px;
                margin
