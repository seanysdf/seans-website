name: Process New Content

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

permissions:
  contents: write
  issues: read

jobs:
  process-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create directories if they don't exist
        run: |
          mkdir -p data content/art content/photos content/journal content/cat content/videos pages css
      
      - name: Create empty data files if they don't exist
        run: |
          for file in art photos journal cat videos; do
            [ -f data/$file.json ] || echo '{"items":[]}' > data/$file.json
          done
      
      - name: Process issue content
        if: github.event_name == 'issues'
        run: |
          echo '${{ toJSON(github.event.issue) }}' > issue_data.json

          # Create processing script
          cat > process-issue.js << 'EOF'
          const fs = require('fs');

          try {
              const issueData = JSON.parse(fs.readFileSync('issue_data.json', 'utf8'));

              const title = issueData.title || "Untitled";
              const body = issueData.body || "";
              const createdAt = issueData.created_at || new Date().toISOString();
              const labels = issueData.labels || [];

              const date = new Date(createdAt);
              const formattedDate = \`\${date.getDate().toString().padStart(2, '0')}.\${(date.getMonth()+1).toString().padStart(2, '0')}.\${date.getFullYear()}\`;

              let contentType = 'art';
              if (title.toLowerCase().includes('[photo]') || labels.some(l => l.name.toLowerCase() === 'photo')) contentType = 'photos';
              if (title.toLowerCase().includes('[journal]') || labels.some(l => l.name.toLowerCase() === 'journal')) contentType = 'journal';
              if (title.toLowerCase().includes('[cat]') || labels.some(l => l.name.toLowerCase() === 'cat')) contentType = 'cat';
              if (title.toLowerCase().includes('[video]') || labels.some(l => l.name.toLowerCase() === 'video')) contentType = 'videos';

              function extractField(body, fieldName) {
                  const regex = new RegExp(\`### \${fieldName}\\s+([^#]*?)(?=###|$)\`, 's');
                  const match = body.match(regex);
                  return match ? match[1].trim() : '';
              }

              const description = extractField(body, 'Description');
              const imageUrl = extractField(body, 'Image URL \\(optional\\)');
              const videoUrl = extractField(body, 'Video URL \\(optional\\)');

              const newItem = {
                  id: title.toLowerCase().replace(/\s+/g, '-'),
                  title: title,
                  date: formattedDate,
                  description: description || null,
                  image: imageUrl || null,
                  video: videoUrl || null,
                  url: \`content/\${contentType}/\${title.toLowerCase().replace(/\s+/g, '-')}.html\`
              };

              const dataPath = \`data/\${contentType}.json\`;
              let data = { items: [] };
              
              if (fs.existsSync(dataPath)) {
                  try {
                      data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
                  } catch (error) {
                      console.log(\`‚ö†Ô∏è Error reading \${dataPath}. Creating new file.\`);
                  }
              }

              data.items.unshift(newItem);
              fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));

              console.log(\`‚úÖ Successfully added item to \${dataPath}\`);

              // üî• Now update index.html üî•
              const htmlPath = 'index.html';
              if (fs.existsSync(htmlPath)) {
                  let htmlContent = fs.readFileSync(htmlPath, 'utf8');

                  // Find section for this content type
                  const sectionRegex = new RegExp(\`<div id="\${contentType}-section">([\\s\\S]*?)<\\/div>\`);
                  const match = htmlContent.match(sectionRegex);

                  if (match) {
                      console.log(\`üîÑ Updating \${contentType} section in index.html...\`);

                      let newSectionContent = \`<div id="\${contentType}-section">\`;
                      data.items.slice(0, 5).forEach(item => {
                          newSectionContent += \`
                              <div class="item">
                                  <span class="date">\${item.date}</span>
                                  <a href="\${item.url}">\${item.title}</a>
                                  \${item.image ? \`<br><img src="\${item.image}" style="max-width:100px;">\` : ""}
                                  \${item.video ? \`<br><iframe width="200" height="113" src="https://www.youtube.com/embed/\${item.video.split("v=")[1]}" frameborder="0" allowfullscreen></iframe>\` : ""}
                              </div>
                          \`;
                      });
                      newSectionContent += "</div>";

                      // Replace old section with new content
                      htmlContent = htmlContent.replace(sectionRegex, newSectionContent);
                      fs.writeFileSync(htmlPath, htmlContent);
                      console.log(\`‚úÖ Successfully updated \${contentType} in index.html\`);
                  } else {
                      console.log(\`‚ö†Ô∏è Could not find \${contentType}-section in index.html\`);
                  }
              } else {
                  console.log("‚ùå index.html not found! Skipping update.");
              }

          } catch (error) {
              console.error("‚ùå Error processing issue:", error);
              process.exit(1);
          }
          EOF

          # Run processing script
          node process-issue.js

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add data/*.json index.html
          git commit -m "Updated content from issues" || echo "No changes to commit"
          git push
