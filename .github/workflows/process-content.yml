name: Process New Content

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:

permissions:
  contents: write
  issues: read

jobs:
  process-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create directories if they don't exist
        run: |
          mkdir -p data content/art content/photos content/journal content/cat content/videos pages css
      
      - name: Create empty data files if they don't exist
        run: |
          for file in art photos journal cat videos; do
            [ -f data/$file.json ] || echo '{"items":[]}' > data/$file.json
          done
      
      - name: Process issue content
        if: github.event_name == 'issues'
        run: |
          echo '${{ toJSON(github.event.issue) }}' > issue_data.json

          # Create processing script
          cat > process-issue.js << 'EOF'
          const fs = require('fs');

          try {
              const issueData = JSON.parse(fs.readFileSync('issue_data.json', 'utf8'));

              const title = issueData.title || "Untitled";
              const body = issueData.body || "";
              const createdAt = issueData.created_at || new Date().toISOString();
              const labels = issueData.labels || [];

              const date = new Date(createdAt);
              const formattedDate = \`\${date.getDate().toString().padStart(2, '0')}.\${(date.getMonth()+1).toString().padStart(2, '0')}.\${date.getFullYear()}\`;

              let contentType = 'art';
              if (title.toLowerCase().includes('[photo]') || labels.some(l => l.name.toLowerCase() === 'photo')) contentType = 'photos';
              if (title.toLowerCase().includes('[journal]') || labels.some(l => l.name.toLowerCase() === 'journal')) contentType = 'journal';
              if (title.toLowerCase().includes('[cat]') || labels.some(l => l.name.toLowerCase() === 'cat')) contentType = 'cat';
              if (title.toLowerCase().includes('[video]') || labels.some(l => l.name.toLowerCase() === 'video')) contentType = 'videos';

              function extractField(body, fieldName) {
                  const regex = new RegExp(\`### \${fieldName}\\s+([^#]*?)(?=###|$)\`, 's');
                  const match = body.match(regex);
                  return match ? match[1].trim() : '';
              }

              const description = extractField(body, 'Description');
              const imageUrl = extractField(body, 'Image URL \\(optional\\)');
              const videoUrl = extractField(body, 'Video URL \\(optional\\)');

              const newItem = {
                  id: title.toLowerCase().replace(/\s+/g, '-'),
                  title: title,
                  date: formattedDate,
                  description: description || null,
                  image: imageUrl || null,
                  video: videoUrl || null,
                  url: \`content/\${contentType}/\${title.toLowerCase().replace(/\s+/g, '-')}.html\`
              };

              const dataPath = \`data/\${contentType}.json\`;
              let data = { items: [] };
              
              if (fs.existsSync(dataPath)) {
                  try {
                      data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
                  } catch (error) {
                      console.log(\`⚠️ Error reading \${dataPath}. Creating new file.\`);
                  }
              }

              data.items.unshift(newItem);
              fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));

              console.log(\`✅ Successfully added item to \${dataPath}\`);

          } catch (error) {
              console.error("❌ Error processing issue:", error);
              process.exit(1);
          }
          EOF

          node process-issue.js

      - name: Create or update index.html
        run: |
          if [ ! -f index.html ]; then
            cat > index.html <<EOF
<!DOCTYPE html>
<html>
<head>
    <title>ART ARCHIVE</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
    <h1>ART ARCHIVE</h1>
    <div class="subtitle">personal collection of works / updated irregularly</div>

    <h2>VIDEOS</h2>
    <div id="videos-section">
        <div class="loading">Loading video entries...</div>
    </div>

    <h2>ART</h2>
    <div id="art-section">
        <div class="loading">Loading art entries...</div>
    </div>

    <h2>PHOTOS</h2>
    <div id="photos-section">
        <div class="loading">Loading photo entries...</div>
    </div>

    <h2>JOURNAL</h2>
    <div id="journal-section">
        <div class="loading">Loading journal entries...</div>
    </div>

    <h2>MY CAT</h2>
    <div id="cat-section">
        <div class="loading">Loading cat content...</div>
    </div>

    <div class="footer">
        last updated: <span id="last-updated-date">15.05.2024</span> | no images loaded = faster browsing
        <br>
        <a href="mailto:artist@example.com">contact</a> | 
        <a href="archive.html">complete archive</a> | 
        <a href="about.html">about</a>
    </div>

    <script>
        function loadContent(contentType, elementId, limit = 5) {
            fetch(\`./data/\${contentType}.json?v=\${new Date().getTime()}\`)
                .then(response => response.json())
                .then(data => {
                    const contentSection = document.getElementById(elementId);
                    contentSection.innerHTML = '';

                    if (data.items && data.items.length > 0) {
                        data.items.slice(0, limit).forEach(item => {
                            const itemDiv = document.createElement('div');
                            itemDiv.className = 'item';
                            itemDiv.innerHTML = \`
                                <span class="date">\${item.date}</span>
                                <a href="\${item.url}">\${item.title}</a>
                            \`;
                            contentSection.appendChild(itemDiv);
                        });
                    } else {
                        contentSection.innerHTML = '<div class="loading">No entries yet</div>';
                    }
                })
                .catch(error => console.error("Error loading content:", error));
        }

        document.addEventListener('DOMContentLoaded', function() {
            ['art', 'photos', 'journal', 'cat', 'videos'].forEach(contentType => {
                loadContent(contentType, \`\${contentType}-section\`);
            });
        });
    </script>

</body>
</html>
EOF
          fi

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add data/*.json index.html
          git commit -m "Updated content from issues" || echo "No changes to commit"
          git push
